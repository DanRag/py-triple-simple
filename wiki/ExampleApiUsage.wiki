#summary An example of how to use the API in a novel Python program

= Introduction =

The example here creates a graph visualization using [http://gephi.org/ Gephi] of a RDF class structure and the relations between different class instances.

= Details =

The source for this example is in the program [http://code.google.com/p/py-triple-simple/source/browse/trunk/src/generate_class_instances_graph.py generate_class_instances_graph.py]

We import the pyTripleSimple into pyt namespace and the GephiGexf xml
generator class.
{{{
import pyTripleSimple as pyt
from gexf import GephiGexf
}}}

Now we can initialize triple store
{{{
ts = pyt.SimpleTripleStore() #Create a triple store object
}}}
and load the N-triples file. 
{{{
f = open(ntriples_file_name)
ts.load_ntriples(f)
}}}
Your n-triples file is now in memory with indices on subjects, predicates, and objects. Everything is in memory so a large 10 million triple file can consume up to 10 gigabytes of RAM.

The first step is to get counts on the number of distinct classes with counts using the simple_pattern_match method:
{{{
classes_result = ts.simple_pattern_match([('a','t','c')],[('t','in',[rdf_type])],['c'])
}}}
Here we match all triple which have predicate  rdf_type = "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>".  By only asking to return the variable 'c' in the result set the method automatically groups and counts by 'c'.  The results are returned like this:
{{{
[[(),5]]
}}}