#summary An example of how to use the API in a novel Python program

= Introduction =

The example here creates a graph visualization using [http://gephi.org/ Gephi] of a RDF class structure and the relations between different class instances. This might be of interest if you you want to visualize the rich ontological structure of a [http://vivoweb.org VIVO] site.

= Details =

The source for this example is in the program [http://code.google.com/p/py-triple-simple/source/browse/trunk/src/generate_class_instances_graph.py generate_class_instances_graph.py]

First import the pyTripleSimple into pyt the namespace and the [http://code.google.com/p/py-triple-simple/source/browse/trunk/src/lib/gexf.py GephiGexf] class.
{{{
import pyTripleSimple as pyt
from gexf import GephiGexf
}}}

Then initialize triple store:
{{{
ts = pyt.SimpleTripleStore() #Create a triple store object
}}}
and load the N-triples file. 
{{{
f = open(ntriples_file_name)
ts.load_ntriples(f)
}}}
The n-triples file is now in memory with indices on subjects, predicates, and objects for fast retrieval.

The first step is to get counts on the number of distinct classes with counts using the simple_pattern_match method:
{{{
classes_result = ts.simple_pattern_match([('a','t','c')],[('t','in',[rdf_type])],['c'])
}}}
Here all triple which have predicate  rdf_type = "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>" are matched.  By only asking to return the variable 'c' in the result set the method automatically groups and counts by 'c'.  The results are returned like this:
{{{
[[('<http://vivoweb.org/ontology/core#Authorship>',), 93779],
 [('<http://xmlns.com/foaf/0.1/Person>',), 31137],
 [('<http://vivoweb.org/ontology/core#Relationship>',), 18353],
 [('<http://vivoweb.org/ontology/core#InformationResource>',), 18274],
 [('<http://purl.org/ontology/bibo/Article>',), 15960],
 [('<http://purl.org/ontology/bibo/AcademicArticle>',), 15089],
 [('<http://purl.obolibrary.org/obo/ERO_0000595>',), 9197],
 [('<http://purl.org/ontology/bibo/Journal>',), 2327],
 [('<http://purl.org/ontology/bibo/Periodical>',), 2314],
 [('<http://purl.org/ontology/bibo/Collection>',), 2314]]
}}}
This is a more complicated match which finds the predicate 't' between classes 'ca' and 'cb'
{{{
property_class_results = ts.simple_pattern_match([('a','p','b'),('a','t','ca'),(('b','t','cb'))],[('t','in',[rdf_type]),('p','!=','t')],['p','ca','cb'])
}}}

By looping through the matched result sets a weight is set to the nodes which are classes and different predicates which are edges.  The final output in Gephi after applying the [http://en.wikipedia.org/wiki/Force-based_algorithms_%28graph_drawing%29 Fruchterman-Reingold] algorithm and some manual aesthetics is:
[http://dl.dropbox.com/u/21690634/reach-nolabels-small.png]
The visualization of the Ntriples  from a VIVO sites provides a high level overview of the ontological structure and the relative importance of classes and different predicates.  