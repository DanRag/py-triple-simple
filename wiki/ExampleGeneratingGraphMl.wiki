#summary Generating GraphML from an N-triples (RDF) file
#labels GraphML

= Introduction =

At the lowest level the semantic Web is built on the Resource Description Framework (RDF). RDF is a graph model. It would be expected that a wide range of network analytical tools could be directly applied to a RDF data set. However, most network algorithms assume that a graph does not have parallel edges which the RDF model allows. The challenge is to pull out simpler graphs from the RDF "[http://link.informatics.stonybrook.edu/rxnorm/RXAUI/2982568 hairball]" for analysis. Py-triple-simple can generate GraphML file from a N-triples file. GraphML, an XML based format, is a standard for graph interchange. In this example we will generate a publication co-authorship network from an RDF dump of a VIVO site.

= Details =

To understand how to go from an RDF N-triples to a GraphML file the code in the script [http://code.google.com/p/sbu-mi-vivo-tools/source/browse/trunk/generate_coauthor_graph.py generate_coauthor_graph.py ] will be explained.

The first step will be to open and load the N-triples file into memory.
{{{
from pyTripleSimple import SimpleTripleStore
ts = SimpleTripleStore()
f = open(file_name)
print("Loading triples")
ts.load_ntriples(f)
f.close()
}}}
The next step is to initialize the class for converting a SimpleTripleStore instance to a graph model.
{{{
graph_obj = ExtractGraphFromSimpleTripleStore(ts)
graph_obj.register_label()
}}}

In order to accurately model information for the application the VIVO ontology is more complex than initially one expects. It is not always the case that a single link needs to be traversed but a longer path will need to be followed. To generate a co-authorship network where we link faculty who have shared publications we need to traverse several triples and condense this into a single link.
[http://dl.dropbox.com/u/21690634/vivo-authorship-link.png]
In SPARQL this type of construction can be done with a construct statement but we still have the difficulty when we want to analyze the graph.

The following simple patterns can be used to connect two authors:
{{{
base_patterns = [("a1","p1","c1"),("a1","t","f"),("c1","p2","ar1"),("c2","p2","ar1"),("a2","p1","c2")]
base_restrictions = [("p1","in",["<http://vivoweb.org/ontology/core#authorInAuthorship>"]),
        ("p2", "in", ["<http://vivoweb.org/ontology/core#linkedInformationResource>"]),
        ("c1","!=","c2")]
}}}
This complete co-author network can get rather large. Additional restrictions can be added to restrict co-authorships between faculty members of the site. This is done easily because the simple triple pattern object is based on Python lists so it is easy to programatically modify the pattern. 
{{{
membership_pattern = ("a2","t","f")
membership_restriction = ("t","in", ["<http://vivoweb.org/ontology/core#hasMemberRole>"])
base_patterns.append(membership_pattern)
base_restrictions.append(membership_restriction)
}}}
Finally we add the restrictions and pattern to the instance of ExtractGraphFromSimpleTripleStore and call the method for generating the GraphML
{{{
graph_obj.add_pattern_for_links(base_patterns,base_restrictions,["a1","a2"],"coauthors")
fo = open(graphml_file_name,"w")
graph_obj.translate_into_graphml_file(fo)
}}}
Now we can import the generated into software for analyzing graphs.  Mathematica 8 has added a rich set of functions for analyzing graphs.